#!/bin/bash

# Clear the terminal log if first arg is not false
if [[ "${1:-}" = init ]]; then shift; else clear; fi

# If docker is installed - it means backup-command is being run on host
if command -v docker >/dev/null 2>&1; then

  # Add -i if we're in interactive shell
  [[ $- == *i* ]] && bash_flags=(-i) || bash_flags=()

  # Execute backup-command within the container environment passing all arguments, if any
  docker compose exec -it -e TERM="$TERM" wrapper bash "${bash_flags[@]}" "$(basename "${BASH_SOURCE[0]}")" "$@"

# Else it means we're in the wrapper-container, so proceed with the backup
else

  # Make sure execution stops on any error
  set -eu -o pipefail

  # Load functions
  source maintain/functions.sh

  # Pick GH_TOKEN_CUSTOM_RW from .env
  export GH_TOKEN_CUSTOM_RW="$(grep "^GH_TOKEN_CUSTOM_RW=" .env | cut -d '=' -f 2-)"

  # Set up is_cloned flag and has_token flags
  if [[ "$(get_current_repo)" = "indi-engine/newapp" ]]; then is_cloned=true; else is_cloned=false; fi
  if [[ "$GH_TOKEN_CUSTOM_RW" = "" ]]; then has_token=false; else has_token=true; fi

  # If current repo is 'indi-engine/newapp' - it means it's a clone of Indi Engine blank repo,
  # so to be able to create a backup - we have to ask user to create own repo with access token
  if [[ $is_cloned = true ]]; then

    # If repo name is NOT given by $REPO variable from outside - prompt for it
    if [[ "${REPO:-}" = "" ]]; then
      href="${g}https://github.com/new${d}${gray}";
      read_text "# Please create a repository at $href and input it's name:" "OWNER/REPO" true
      repo="$INPUT_VALUE"
      echo
    else
      repo="$REPO"
    fi
  fi

  # If access token is not yet specified
  if [[ $has_token = false ]]; then

    # If access token is not given by $TOKEN variable from outside - prompt for it
    if [[ "${TOKEN:-}" = "" ]]; then
      repo=${repo:-$(get_current_repo)}
      href="${g}https://github.com/settings/personal-access-tokens/new${d}${gray}"
      line1="# Please goto $href, create"
      line2="# there and input here a fine-grained personal access token with read-write"
      line3="# access to the Contents of ${g}${repo}${gray} repository:"
      read_text "$line1\n$line2\n$line3" "GH_TOKEN_CUSTOM_RW" true
      token="$INPUT_VALUE"
      echo
    else
      token="$TOKEN"
    fi

    # Set value for GH_TOKEN_CUSTOM_RW in .env
    echo -n "Updating .env with GH_TOKEN_CUSTOM_RW..."
    sed -Ei 's~^(GH_TOKEN_CUSTOM_RW=).*?$~\1'"$token"'~' .env && echo " Done"
  fi

  # Push cloned repo to user's github
  if [[ $is_cloned = true ]]; then

    # Load custom token
    export GH_TOKEN_CUSTOM_RW="$(get_env "GH_TOKEN_CUSTOM_RW")"

    # Use GH_TOKEN_CUSTOM_RW as git password
    git_askpass "custom"

    # Change repo url in .git/config
    echo -n "Changing cloned repo url to https://github.com/$repo ..."
    git remote set-url origin "https://github.com/$repo" && echo " Done"

    # Push cloned repo to github
    echo "Pushing cloned repo to github:"
    git push -u origin main 2>&1 | prepend "Â» "
    echo
  fi

  # Refresh token
  export GH_TOKEN_CUSTOM_RW="$(grep "^GH_TOKEN_CUSTOM_RW=" .env | cut -d '=' -f 2-)"

  # Export token and into current shell session
  export GH_TOKEN="${GH_TOKEN_CUSTOM_RW:-}"

  # If repo was cloned or token was missing - do full initial backup
  if [[ $is_cloned = true || $has_token = false ]]; then

    # Do full backup
    backup "${1:-custom}"

  # Else
  else

    # If we're in detached HEAD state - it means we did an unconfirmed restore
    # so make sure new backups won't be created until restore is confirmed or cancelled
    if is_uncommitted_restore; then
      echo "Your MUST commit or cancel the restore you've done before."
      echo "Do this using 'source restore commit' or 'source restore cancel' commands."
      echo "Creation of ANY new backups is prevented until then."
      echo ""

    # Else if we're in 'failed migration' state indicated by data/before directory presence
    elif [[ -d data/before ]]; then

      echo "Database migration has failed during last update attempt, so you MUST either"
      echo "run 'source restore dump before' command to get back to the original database"
      echo "state (i.e. before migration), or execute 'source update' command again to retry"
      echo "the migration if failure reason is already investigated and fixed."
      echo "Creation of ANY new backups is prevented until then."
      echo ""

    # Else if we're NOT in detached HEAD state - do the backup
    else

      # Set up backup scenario based on 1st arg
      if [[ "${1:-}" = "dump" || "${1:-}" = "uploads" ]]; then
        scenario="${1:-}"
      else
        scenario="full"
      fi

      # Set up most_recent flag
      if [[ "$scenario" != "full" && "${2:-}" = "--recent" ]]; then
        most_recent=1
      else
        most_recent=0
      fi

      # If first argument is 'dump' or 'uploads'
      if [[ "$scenario" != "full" ]]; then

        # Print that we're going to update dump (or uploads) inside already existing backup
        if [[ $most_recent = 0 ]]; then
          echo -e "\nBACKUP ONLY: $scenario\n"
        fi

        # Ask user to select which backup should be patched with new dump or uploads
        release_choices "to be patched" $most_recent

        # If there was a manual choice for backup version to be patched
        if [[ $most_recent = 0 ]]; then

          # Print that version
          echo -e "SELECTED VERSION: $(get_release_title $selected)\n"

        # Else
        else

          # If most recent version's environment does match the current instance's environment
          if [[ "${selected:0:1}" == "${APP_ENV:0:1}" ]]; then

            # Print version to be patched
            echo -e "VERSION TO PATCH: ${g}$(get_release_title $selected)${d}\n"

          # Else
          else

            # Print a message there is nothing can be patched
            echo -e "VERSION TO PATCH: ${r}no $APP_ENV backups created so far,${d}"
            echo -e "                  ${g}so creating new custom $APP_ENV backup ${d}\n"

            # Pivot backup scenario to full new custom backup
            scenario="full"
          fi
        fi

        # Do backup as per scenario
          if [[ "$scenario" = "dump"    ]]; then backup_dump "$selected";
        elif [[ "$scenario" = "uploads" ]]; then backup_uploads "$selected";
        elif [[ "$scenario" = "full"    ]]; then backup "custom"; fi

      # Else do full custom backup
      else
        backup "${1:-custom}"
      fi
    fi
  fi
fi
