#!/bin/bash

# Make sure execution stops on any error
set -eu -o pipefail

# Clear the terminal log
clear

# Load functions
source maintain/functions.sh

# Set the trap: Call on_exit function when the script exits
trap on_exit EXIT

# If docker is installed - it means restore-command is being run on host
if command -v docker >/dev/null 2>&1; then

  # Add -i if we're in interactive shell
  [[ $- == *i* ]] && bash_flags=(-i) || bash_flags=()

  # Execute restore-command within the container environment passing all arguments, if any
  docker compose exec -it -e TERM="$TERM" wrapper bash "${bash_flags[@]}" "$(basename "${BASH_SOURCE[0]}")" $@

  # Do restart, if needed according to scenario written to var/restart
  restart_if_need

# Else it means we're in the wrapper-container, so proceed with the restore
else

  # Global msg
  declare -g stdout

  # Vendor dir
  VDR="custom/vendor/indi-engine"

  # Prompt for GIT_COMMIT_NAME and/or GIT_COMMIT_EMAIL if any missing
  prompt_git_commit_identify_if_missing

  # Load custom token
  export GH_TOKEN_CUSTOM_RW="$(get_env GH_TOKEN_CUSTOM_RW)"

  # Use GH_TOKEN_CUSTOM_RW as git password
  git_askpass "custom"

  # Get 'git status' for system repo
  exec_command "git -C $VDR/system status"

  # If system package has uncommitted changes - ask user if we should proceed
  if [[ ! "$stdout" =~ "nothing to commit" ]] && [ -z "${FLASK_APP:-}" ]; then
    echo -e "${gray}$stdout${d}"
    echo "----"
    echo "You have uncommitted changes. Do you want to proceed?"
    echo "Press Ctrl+C to cancel, or Enter to proceed"
    read -n 1
  fi

  # Check if custom repo is outdated
  msg="Checking if current repo is outdated..."; echo -n "$msg"
  set +e; is_repo_outdated "custom"; exit_code=$?; set -e

  # If yes
  if [[ $exit_code -eq 0 ]]; then

    # Indicate yes
    echo " Yes"

    # Pull changes from remote
    echo "Pulling latest changes from github:"
    git pull 2>&1 | prepend "» "

    # Install possibly updated composer packages
    echo "Installing possibly updated composer packages:"
    composer -d custom install 2>&1 | grep -v " fund" | prepend "» "

  # Else indicate no
  else
    echo " No"
  fi

  # Declare associative array to track which of indi-engine/* repos are outdated
  declare -A is_outdated=()

  # Use GH_TOKEN_SYSTEM_RO as git password as now we'll check if any Indi Engine packages are outdated
  echo "Checking if any of local indi-engine/* packages are outdated:"
  git_askpass "system"

  # Check indi-engine/* repos
  for repo in system client; do

    msg=" - ${g}indi-engine/$repo${d} ..."; echo -en "$msg"
    set +e; is_repo_outdated "$repo"; exit_code=$?; set -e

    # If yes - indicate that
    if [[ $exit_code -eq 0 ]]; then
      is_outdated["$repo"]=true
      echo " Yes"

    # Else to next check
    else

      # Get last pushed commit as $stdout that was set by above is_repo_outdated "$repo" call
      last_pushed_commit="$stdout"

      # Check if repo commit hash mentioned in lock file is outdated
      if is_lock_outdated "$repo" "$last_pushed_commit"; then
        is_outdated["$repo"]=true
        echo " Yes"
      else
        echo " No"
      fi
    fi
  done

  # Use GH_TOKEN_CUSTOM_RW as git password, back
  git_askpass "custom"

  # If one/both of indi-engine packages is/are outdated, or their mentions
  # inside composer.lock are outdated, or composer.lock file is changed but not committed
  if (( ${#is_outdated[@]} > 0 )) || [[ -n "$(git status --porcelain custom/composer.lock)" ]]; then

    # Update indi-engine/* packages
    echo "Updating outdated ones:"
    composer -d custom update -W -n --no-ansi "indi-engine/*" 2>&1 | grep -v " fund" | prepend "» "

    # Commit composer.lock
    echo "Committing composer.lock:"
    git add custom/composer.lock 2>&1 | prepend "» "
    msg=".git/COMMIT_EDITMSG"; if [[ ! -f "$msg" ]]; then touch $msg; fi;
    git commit -F "$msg" 2>&1 | prepend "» "

    # If GH_TOKEN_CUSTOM_RW is given
    if [[ ! "${GH_TOKEN_CUSTOM_RW:-}" = "" ]]; then

      # Push changes to remote repo
      echo "Pushing to github:"
      git push 2>&1 | prepend "» "

    # Else
    else
      echo "NOTE: Updates are committed but not pushed to github as no GH_TOKEN_CUSTOM_RW given"
    fi
  fi

  # Change owner for locale files to apache user
  user="www-data"
  for repo in "" vendor/indi-engine/system/; do
    dir="custom/${repo}application/lang"
    if [ -d "$dir" ]; then
      chown -R "$user:$user" "$dir"
    fi
  done

  # Get current repo
  current_repo="$(get_current_repo)"

  # If current repo is NOT a user's own repo yet
  if [[ "$current_repo" = "indi-engine/newapp" ]]; then

    # Fetch latest changes
    git fetch origin

    # Get a list of changed files BEFORE applying the update
    changed_files=$(git diff --name-only HEAD origin/main -- . ":(exclude)custom/")

    # Apply the update
    git merge origin/main

  # Else
  else

    # Ensure devops remote exists
    git remote | grep -q "^devops$" || git remote add devops https://github.com/indi-engine/newapp

    # Fetch latest from devops remote
    echo "Fetching latest DevOps-setup files:"
    git fetch devops 2>&1 | prepend  "» "

    # Get a list of changed files BEFORE applying the update
    changed_files=$(git diff --name-only HEAD devops/main -- . ":(exclude)custom/")

    # Apply the update
    git checkout devops/main -- . ":(exclude)custom/"
  fi

  # Default restart scenario: do nothing
  restart=5

  # Foreach updated file
  while IFS= read -r file; do

    # Check if it affects restart scenario
    case "$file" in
      compose/wrapper/Dockerfile.base|compose/apache/Dockerfile.base)     [[ $restart -gt 1 ]] && restart=1 ;;
      .dockerignore|compose/wrapper/Dockerfile|compose/apache/Dockerfile) [[ $restart -gt 2 ]] && restart=2 ;;
      docker-compose.yml|.env.dist)                                       [[ $restart -gt 3 ]] && restart=3 ;;
      compose/*)                                                          [[ $restart -gt 4 ]] && restart=4 ;;
    esac

    # Add to commit
    [[ -e "$file" ]] && git add "$file"
  done <<< "$changed_files"

  # Print changes files and restart scenario
  if [[ "$changed_files" = "" ]]; then
    echo "No DevOps-setup files are changed"
  else
    echo "Changed ones:"
    echo "$changed_files" | prepend  " - "
  fi

  # If there is something added to commit for user's own repo
  if [[ "$current_repo" != "indi-engine/newapp" ]] && ! git diff --cached --quiet; then

    # Do commit
    echo "Adding to local repo:"
    git commit -m "Updated DevOps-setup files from indi-engine/newapp" 2>&1 | prepend "» "

    # Push to github
    echo "Pushing to github:"; git push 2>&1 | prepend "» "
  fi

  # If restart scenario is NOT 'do nothing'
  if [[ "$restart" != 5 ]]; then

    # IF restart was already planned but is still not done due to migration failure AND if current update assume
    # 'harder' restart scenario is needed comparing with one previously planned based on previous update
    # THEN update previously planned restart scenario with 'harder' one
    if [[ -f var/restart.plan ]]; then
      if [[ "$restart" -lt "$(cat var/restart.plan)" ]]; then
        echo "$restart" > var/restart.plan
      fi

    # Write restart scenario to a temporary file
    else
      echo "$restart" > var/restart.plan
    fi
  fi

  # Run database migrations, if any new ones detected for system and/or custom fractions
  migrate_if_need

  # If we reached this line, if means migrations were run ok, so we recall if restart is needed and if yes - rename
  # temporary var/restart.plan to var/restart - to be further picked by watcher-process running on host
  if [[ -f var/restart.plan ]]; then
    mv var/restart.plan var/restart
  fi

  # Print status
  case "$restart" in
    1) echo "Base images, own images, and container refresh is needed" ;;
    2) echo "Own images and container refresh is needed" ;;
    3) echo "Container recreation is needed" ;;
    4) echo "Container restart is needed" ;;
    5) echo "No container changes are needed" ;;
  esac
  echo
fi
